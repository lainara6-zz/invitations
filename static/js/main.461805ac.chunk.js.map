{"version":3,"sources":["Home.js","List.js","App.js","serviceWorker.js","index.js"],"names":["App","history","useHistory","style","flex","display","flexDirection","justifyContent","alignItems","margin","Paper","elevation","padding","borderRadius","border","color","textAlign","data","map","group","onClick","push","fontSize","width","backgroundColor","cursor","name","location","useLocation","paddingBottom","state","Table","size","maxWidth","aria-label","TableHead","TableRow","TableCell","TableBody","guests","index","key","path","List","Home","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qy4DAgEeA,MA3Df,WACE,IAAMC,EAAUC,cAChB,OACE,yBACEC,MAAO,CACLC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,aAGV,kBAACC,EAAA,EAAD,CACEC,UAAU,IACVR,MAAO,CACLS,QAAS,OACTC,aAAc,EACdC,OAAQ,sBAGV,wBAAIX,MAAO,CAAEY,MAAO,UAAWC,UAAW,WAA1C,sBAGA,yBACEb,MAAO,CACLE,QAAS,OACTC,cAAe,SACfM,QAAS,YACTL,eAAgB,SAChBC,WAAY,WAGbS,EAAKC,KAAI,SAACC,GACT,OACE,4BACEC,QAAS,kBAAMnB,EAAQoB,KAAK,mBAAoB,CAACF,WACjDhB,MAAO,CACLY,MAAO,UACPO,SAAU,OACVV,QAAS,WACTH,OAAQ,UACRc,MAAO,QACPC,gBAAiB,UACjBX,aAAc,EACdC,OAAQ,oBACRW,OAAQ,YAGTN,EAAMO,a,wCCOR1B,MAnDf,WACE,IAAM2B,EAAWC,cACjB,OACE,yBACEzB,MAAO,CACLC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZqB,cAAe,SAGjB,wBAAI1B,MAAO,CAAEY,MAAO,UAAWC,UAAW,WACvCW,EAASG,MAAMX,MAAMO,MAExB,kBAACK,EAAA,EAAD,CAAOC,KAAK,QAAQ7B,MAAO,CAAE8B,SAAU,SAAWC,aAAW,mBAC3D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWlC,MAAO,CAAEY,MAAO,YAA3B,wCACA,kBAACsB,EAAA,EAAD,CAAWlC,MAAO,CAAEY,MAAO,YAA3B,kEAGJ,kBAACuB,EAAA,EAAD,KACGX,EAASG,MAAMX,MAAMoB,OAAOrB,KAAI,SAACQ,EAAMc,GACtC,OACE,kBAACJ,EAAA,EAAD,CAAUK,IAAKD,GACb,kBAACH,EAAA,EAAD,CAAWlC,MAAO,CAAEY,MAAO,YAAcyB,EAAQ,GACjD,kBAACH,EAAA,EAAD,CAAWlC,MAAO,CAAEY,MAAO,YAAcW,WCX1C1B,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0C,KAAK,qBACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,KACV,kBAACE,EAAD,WCPQC,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.461805ac.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Link, Paper } from \"@material-ui/core\";\nimport data from \"./data.json\";\n\nfunction App() {\n  const history = useHistory();\n  return (\n    <div\n      style={{\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: \"40px 5px\",\n      }}\n    >\n      <Paper\n        elevation=\"0\"\n        style={{\n          padding: \"20px\",\n          borderRadius: 4,\n          border: \"1px solid #d9d9d9\",\n        }}\n      >\n        <h3 style={{ color: \"#0047ab\", textAlign: \"center\" }}>\n          Wedding Invitation\n        </h3>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: 'column',\n            padding: \"10px 10px\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          {data.map((group) => {\n            return (\n              <button\n                onClick={() => history.push(\"invitations/list\", {group})}\n                style={{\n                  color: \"#4f4f4f\",\n                  fontSize: '16px',\n                  padding: \"8px 16px\",\n                  margin: \"4px 0px\",\n                  width: '240px',\n                  backgroundColor: \"#eaeaea\",\n                  borderRadius: 2,\n                  border: \"1px solid #e1e1e1\",\n                  cursor: 'pointer'\n                }}\n              >\n                {group.name}\n              </button>\n            );\n          })}\n        </div>\n      </Paper>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction App() {\n  const location = useLocation();\n  return (\n    <div\n      style={{\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        paddingBottom: '20px'\n      }}\n    >\n      <h3 style={{ color: \"#0047ab\", textAlign: \"center\" }}>\n        {location.state.group.name}\n      </h3>\n      <Table size=\"small\" style={{ maxWidth: \"340px\" }} aria-label=\"invitation list\">\n        <TableHead>\n          <TableRow>\n            <TableCell style={{ color: \"#0047ab\" }}>លេខរៀង</TableCell>\n            <TableCell style={{ color: \"#0047ab\" }}>ឈ្មោះភ្ញៀវ</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {location.state.group.guests.map((name, index) => {\n            return (\n              <TableRow key={index}>\n                <TableCell style={{ color: \"#4f4f4f\" }}>{index + 1}</TableCell>\n                <TableCell style={{ color: \"#4f4f4f\" }}>{name}</TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n        {/* <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n              <TableCell align=\"right\">{row.fat}</TableCell>\n              <TableCell align=\"right\">{row.carbs}</TableCell>\n              <TableCell align=\"right\">{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody> */}\n      </Table>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './Home'\nimport List from './List'\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/invitations/list\">\n            <List />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'fontsource-roboto'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}